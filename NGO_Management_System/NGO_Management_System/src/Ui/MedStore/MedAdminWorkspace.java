/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Ui.MedStore;

import Hospital.Encounter.Encounter;
import Ngo.Order.NgoOrder;
import Pharmacy.DeliveryMan.DeliveryMan;
import Pharmacy.Medicine.Medicine;
import Pharmacy.Order.Order;
import Pharmacy.Pharmacist.Pharmacist;
import System.Directories.DB4OUtil;
import System.Directories.DataValidation;
import System.Directories.MainSystem;
import java.awt.CardLayout;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.lang.System.Logger;
import java.lang.System.Logger.Level;
import java.util.ArrayList;
import java.util.Date;
import java.util.Properties;
import javax.mail.Authenticator;
import javax.mail.Message;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
//import javax.activation.DataHandler;
//import javax.activation.DataSource;
//import javax.activation.FileDataSource;

/**
 *
 * @author nitishbelagali
 */
public class MedAdminWorkspace extends javax.swing.JPanel {

    /**
     * Creates new form MedAdminWorkspace
     */
    private JPanel cardPanel;
    private MainSystem system;
    private DB4OUtil dB4OUtil;
    private DataValidation data;
    
    public MedAdminWorkspace(JPanel cardPanel, MainSystem system, DB4OUtil dB4OUtil) {
        initComponents();
        this.cardPanel = cardPanel;
        this.system = system;
        this.dB4OUtil = dB4OUtil;
        this.data = new DataValidation();
        
        populateHospitalEncounterTable();
        populateItemTable();
        populateStorekeeperTable();
        populateHospitalEncounterOrderTable();
        populateNgoOrderTable();
        populateMedOrders();
        populateCombo();
        
        populateDeliveryManTable();
        populateBillItemTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SplitPaneMedAdmin = new javax.swing.JSplitPane();
        panelControl = new javax.swing.JPanel();
        btnHome = new javax.swing.JButton();
        btnEncounter = new javax.swing.JButton();
        btnStorekeeper = new javax.swing.JButton();
        btnBilling = new javax.swing.JButton();
        btnItems = new javax.swing.JButton();
        btnDeliveryMan = new javax.swing.JButton();
        btnNgoOrders = new javax.swing.JButton();
        btnMedOrders = new javax.swing.JButton();
        panelWork = new javax.swing.JPanel();
        panelHome = new javax.swing.JPanel();
        lblTitle2 = new javax.swing.JLabel();
        lblRole = new javax.swing.JLabel();
        btnLogOut = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        panelEncounter = new javax.swing.JPanel();
        lblTitleEncounter = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableEncounter1 = new javax.swing.JTable();
        btnEncounterView = new javax.swing.JButton();
        lblEncounterNo = new javax.swing.JLabel();
        lblEncounterHospital = new javax.swing.JLabel();
        lblDoctorEncounterUsername = new javax.swing.JLabel();
        lblEncounterPatientUsername = new javax.swing.JLabel();
        lblEncounterDate = new javax.swing.JLabel();
        txtEncounterNo = new javax.swing.JTextField();
        txtEncounterHospital = new javax.swing.JTextField();
        txtEncounterDoctorUsername = new javax.swing.JTextField();
        txtEncounterPatientUsername = new javax.swing.JTextField();
        txtEncounterDate = new javax.swing.JTextField();
        lblEncounterBP = new javax.swing.JLabel();
        txtEncounterBP = new javax.swing.JTextField();
        lblEncounterTemperature = new javax.swing.JLabel();
        txtEncounterTemperature = new javax.swing.JTextField();
        lblEncounterMedicine = new javax.swing.JLabel();
        txtEncounterMedicine = new javax.swing.JTextField();
        lblEncounterMedicineQuantity = new javax.swing.JLabel();
        txtMedicineQuantity = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        panelItem = new javax.swing.JPanel();
        lblTitlePatient = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableItem = new javax.swing.JTable();
        btnMedCreate = new javax.swing.JButton();
        btnPatientView = new javax.swing.JButton();
        btnPatientUpdate = new javax.swing.JButton();
        btnPatientDelete = new javax.swing.JButton();
        lblPatientID = new javax.swing.JLabel();
        txtItemId = new javax.swing.JTextField();
        lblPatientUsername = new javax.swing.JLabel();
        txtItemName = new javax.swing.JTextField();
        lblPatientName = new javax.swing.JLabel();
        txtItemCost = new javax.swing.JTextField();
        lblPatientAge = new javax.swing.JLabel();
        txtItemExDate = new javax.swing.JTextField();
        lblPatientEmail = new javax.swing.JLabel();
        txtItemQuantity = new javax.swing.JTextField();
        lblPatientEmail1 = new javax.swing.JLabel();
        txtItemAvailability = new javax.swing.JComboBox<>();
        lblPatientName1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtItemDesc = new javax.swing.JTextArea();
        panelStorekeeper = new javax.swing.JPanel();
        lblTitle3 = new javax.swing.JLabel();
        lblCaretakerSearch = new javax.swing.JLabel();
        txtMedStoreSearch = new javax.swing.JTextField();
        ScrollPaneNgoManager1 = new javax.swing.JScrollPane();
        tableStorekeeper = new javax.swing.JTable();
        btnCaretakerView = new javax.swing.JButton();
        btnCaretakerDelete = new javax.swing.JButton();
        lblCaretakerId = new javax.swing.JLabel();
        txtCaretakerId = new javax.swing.JTextField();
        lblCaretakerEmailId = new javax.swing.JLabel();
        txtCaretakerEmailId = new javax.swing.JTextField();
        lblCaretakerName = new javax.swing.JLabel();
        txtCaretakerName = new javax.swing.JTextField();
        lblCaretakerPhno = new javax.swing.JLabel();
        txtCaretakerPhno = new javax.swing.JTextField();
        lblCaretakerUsername = new javax.swing.JLabel();
        txtCaretakerUsername = new javax.swing.JTextField();
        lblCaretakerPassword = new javax.swing.JLabel();
        txtCaretakerPassword = new javax.swing.JPasswordField();
        txtCaretakerAge = new javax.swing.JTextField();
        lblCaretakerAge = new javax.swing.JLabel();
        btnCaretakerCreate = new javax.swing.JButton();
        btnCaretakerUpdate = new javax.swing.JButton();
        lblCaretakerGender = new javax.swing.JLabel();
        cmbCaretakerGender = new javax.swing.JComboBox<>();
        lblCaretakerRole = new javax.swing.JLabel();
        txtCaretakerRole = new javax.swing.JTextField();
        panelBilling = new javax.swing.JPanel();
        lblTitle4 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tableEncounterOrder = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        tableItem1 = new javax.swing.JTable();
        lblPatientUsername1 = new javax.swing.JLabel();
        txtItemName1 = new javax.swing.JTextField();
        lblPatientName2 = new javax.swing.JLabel();
        txtItemCost1 = new javax.swing.JTextField();
        lblPatientAge1 = new javax.swing.JLabel();
        txtItemExDate1 = new javax.swing.JTextField();
        lblPatientEmail2 = new javax.swing.JLabel();
        txtItemQuantity1 = new javax.swing.JTextField();
        btnBillOrder = new javax.swing.JButton();
        btnSelectItem = new javax.swing.JButton();
        lblOrderId = new javax.swing.JLabel();
        txtItemOrderId = new javax.swing.JTextField();
        jScrollPane7 = new javax.swing.JScrollPane();
        txtReceipt = new javax.swing.JTextArea();
        btnPrint = new javax.swing.JButton();
        panelDeliveryMan = new javax.swing.JPanel();
        lblTitle5 = new javax.swing.JLabel();
        ScrollPaneNgoManager2 = new javax.swing.JScrollPane();
        tableDeliveryMan = new javax.swing.JTable();
        btnCaretakerView1 = new javax.swing.JButton();
        btnCaretakerDelete1 = new javax.swing.JButton();
        lblCaretakerId1 = new javax.swing.JLabel();
        txtCaretakerId1 = new javax.swing.JTextField();
        lblCaretakerEmailId1 = new javax.swing.JLabel();
        txtCaretakerEmailId1 = new javax.swing.JTextField();
        lblCaretakerName1 = new javax.swing.JLabel();
        txtCaretakerName1 = new javax.swing.JTextField();
        lblCaretakerPhno1 = new javax.swing.JLabel();
        txtCaretakerPhno1 = new javax.swing.JTextField();
        lblCaretakerUsername1 = new javax.swing.JLabel();
        txtCaretakerUsername1 = new javax.swing.JTextField();
        lblCaretakerPassword1 = new javax.swing.JLabel();
        txtCaretakerPassword1 = new javax.swing.JPasswordField();
        txtCaretakerAge1 = new javax.swing.JTextField();
        lblCaretakerAge1 = new javax.swing.JLabel();
        btnCaretakerCreate1 = new javax.swing.JButton();
        btnCaretakerUpdate1 = new javax.swing.JButton();
        lblCaretakerGender1 = new javax.swing.JLabel();
        cmbCaretakerGender1 = new javax.swing.JComboBox<>();
        lblCaretakerRole1 = new javax.swing.JLabel();
        txtCaretakerRole1 = new javax.swing.JTextField();
        panelMedicalOrders = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        tableNgoOrder1 = new javax.swing.JTable();
        lblTitle7 = new javax.swing.JLabel();
        panelNgoOrders = new javax.swing.JPanel();
        lblTitle6 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableNgoOrder = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtOrderId = new javax.swing.JTextField();
        txtStatus = new javax.swing.JTextField();
        btnOutForDelivery = new javax.swing.JButton();
        btnViewOrder = new javax.swing.JButton();
        btnUpdateOrder = new javax.swing.JButton();
        btnCancelOrder = new javax.swing.JButton();
        btnDelivered = new javax.swing.JButton();
        txtItem = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtQty = new javax.swing.JTextField();
        txtShopkeerId = new javax.swing.JComboBox<>();
        txtDeliveryManId = new javax.swing.JComboBox<>();

        panelControl.setBackground(new java.awt.Color(51, 51, 51));

        btnHome.setText("Home");
        btnHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHomeActionPerformed(evt);
            }
        });

        btnEncounter.setText("Encounter");
        btnEncounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncounterActionPerformed(evt);
            }
        });

        btnStorekeeper.setText("Storekeeper");
        btnStorekeeper.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStorekeeperActionPerformed(evt);
            }
        });

        btnBilling.setText("Billing");
        btnBilling.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBillingActionPerformed(evt);
            }
        });

        btnItems.setText("Items");
        btnItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnItemsActionPerformed(evt);
            }
        });

        btnDeliveryMan.setText("Delivery Man");
        btnDeliveryMan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeliveryManActionPerformed(evt);
            }
        });

        btnNgoOrders.setText("NGO Orders");
        btnNgoOrders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNgoOrdersActionPerformed(evt);
            }
        });

        btnMedOrders.setText("Medical Orders");
        btnMedOrders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMedOrdersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelControlLayout = new javax.swing.GroupLayout(panelControl);
        panelControl.setLayout(panelControlLayout);
        panelControlLayout.setHorizontalGroup(
            panelControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelControlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnStorekeeper, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEncounter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnHome, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnBilling, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnItems, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDeliveryMan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnNgoOrders, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnMedOrders, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelControlLayout.setVerticalGroup(
            panelControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelControlLayout.createSequentialGroup()
                .addGap(172, 172, 172)
                .addComponent(btnHome)
                .addGap(18, 18, 18)
                .addComponent(btnEncounter)
                .addGap(20, 20, 20)
                .addComponent(btnItems)
                .addGap(18, 18, 18)
                .addComponent(btnStorekeeper)
                .addGap(23, 23, 23)
                .addComponent(btnDeliveryMan)
                .addGap(18, 18, 18)
                .addComponent(btnBilling)
                .addGap(13, 13, 13)
                .addComponent(btnMedOrders)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnNgoOrders)
                .addContainerGap(272, Short.MAX_VALUE))
        );

        SplitPaneMedAdmin.setLeftComponent(panelControl);

        panelWork.setLayout(new java.awt.CardLayout());

        panelHome.setBackground(new java.awt.Color(102, 102, 255));
        panelHome.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblTitle2.setFont(new java.awt.Font("Rockwell", 1, 36)); // NOI18N
        lblTitle2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle2.setText("Medical Store");
        panelHome.add(lblTitle2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 6, 1317, -1));

        lblRole.setFont(new java.awt.Font("Segoe UI Emoji", 1, 14)); // NOI18N
        lblRole.setText("Role: Med Store Admin");
        panelHome.add(lblRole, new org.netbeans.lib.awtextra.AbsoluteConstraints(1095, 107, -1, -1));

        btnLogOut.setText("Log Out");
        btnLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogOutActionPerformed(evt);
            }
        });
        panelHome.add(btnLogOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(1095, 130, -1, -1));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UiImagesssss/MedicVija.jpeg"))); // NOI18N
        panelHome.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1290, 730));

        panelWork.add(panelHome, "card2");

        panelEncounter.setBackground(new java.awt.Color(0, 102, 255));
        panelEncounter.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblTitleEncounter.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        lblTitleEncounter.setForeground(new java.awt.Color(255, 255, 255));
        lblTitleEncounter.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitleEncounter.setText("ENCOUNTER");
        panelEncounter.add(lblTitleEncounter, new org.netbeans.lib.awtextra.AbsoluteConstraints(-130, 10, 1288, 59));

        tableEncounter1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Encounter No", "Doctor UserName", "Patient Username", "BP", "Temperature"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tableEncounter1);

        panelEncounter.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(295, 96, 659, 111));

        btnEncounterView.setText("View");
        btnEncounterView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncounterViewActionPerformed(evt);
            }
        });
        panelEncounter.add(btnEncounterView, new org.netbeans.lib.awtextra.AbsoluteConstraints(572, 225, -1, -1));

        lblEncounterNo.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        lblEncounterNo.setText("Encounter No");
        panelEncounter.add(lblEncounterNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(103, 348, 103, -1));

        lblEncounterHospital.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        lblEncounterHospital.setText("Hospital");
        panelEncounter.add(lblEncounterHospital, new org.netbeans.lib.awtextra.AbsoluteConstraints(103, 397, -1, -1));

        lblDoctorEncounterUsername.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        lblDoctorEncounterUsername.setText("Doctor Username");
        panelEncounter.add(lblDoctorEncounterUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(103, 435, 103, -1));

        lblEncounterPatientUsername.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        lblEncounterPatientUsername.setText("Patient Username");
        panelEncounter.add(lblEncounterPatientUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(103, 484, -1, -1));

        lblEncounterDate.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        lblEncounterDate.setText("Date");
        panelEncounter.add(lblEncounterDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(103, 541, -1, -1));
        panelEncounter.add(txtEncounterNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(224, 345, 97, -1));

        txtEncounterHospital.setEditable(false);
        txtEncounterHospital.setText("Hospital");
        panelEncounter.add(txtEncounterHospital, new org.netbeans.lib.awtextra.AbsoluteConstraints(224, 394, 97, -1));
        panelEncounter.add(txtEncounterDoctorUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(224, 435, 97, -1));
        panelEncounter.add(txtEncounterPatientUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(224, 481, 97, -1));
        panelEncounter.add(txtEncounterDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(224, 538, 97, -1));

        lblEncounterBP.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        lblEncounterBP.setText("BP");
        panelEncounter.add(lblEncounterBP, new org.netbeans.lib.awtextra.AbsoluteConstraints(404, 397, -1, -1));
        panelEncounter.add(txtEncounterBP, new org.netbeans.lib.awtextra.AbsoluteConstraints(549, 394, 127, -1));

        lblEncounterTemperature.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        lblEncounterTemperature.setText("Temperature");
        panelEncounter.add(lblEncounterTemperature, new org.netbeans.lib.awtextra.AbsoluteConstraints(404, 438, -1, -1));
        panelEncounter.add(txtEncounterTemperature, new org.netbeans.lib.awtextra.AbsoluteConstraints(549, 435, 127, -1));

        lblEncounterMedicine.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        lblEncounterMedicine.setText("Medicine");
        panelEncounter.add(lblEncounterMedicine, new org.netbeans.lib.awtextra.AbsoluteConstraints(404, 484, -1, -1));
        panelEncounter.add(txtEncounterMedicine, new org.netbeans.lib.awtextra.AbsoluteConstraints(549, 481, 127, -1));

        lblEncounterMedicineQuantity.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        lblEncounterMedicineQuantity.setText("Medicine Quantity");
        panelEncounter.add(lblEncounterMedicineQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 530, -1, -1));

        txtMedicineQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMedicineQuantityActionPerformed(evt);
            }
        });
        panelEncounter.add(txtMedicineQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 530, 127, -1));

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UiImagesssss/STOCKKK.jpeg"))); // NOI18N
        panelEncounter.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 1220, 630));

        panelWork.add(panelEncounter, "card5");

        panelItem.setBackground(new java.awt.Color(51, 102, 255));

        lblTitlePatient.setFont(new java.awt.Font("Rockwell", 0, 36)); // NOI18N
        lblTitlePatient.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitlePatient.setText("Items");

        tableItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Item Id", "Name", "Cost", "Expiry Date", "Quantity", "Availability"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tableItem);
        if (tableItem.getColumnModel().getColumnCount() > 0) {
            tableItem.getColumnModel().getColumn(2).setHeaderValue("Cost");
            tableItem.getColumnModel().getColumn(3).setHeaderValue("Expiry Date");
            tableItem.getColumnModel().getColumn(4).setHeaderValue("Quantity");
        }

        btnMedCreate.setText("Create");
        btnMedCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMedCreateActionPerformed(evt);
            }
        });

        btnPatientView.setText("View");
        btnPatientView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPatientViewActionPerformed(evt);
            }
        });

        btnPatientUpdate.setText("Update");
        btnPatientUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPatientUpdateActionPerformed(evt);
            }
        });

        btnPatientDelete.setText("Delete");
        btnPatientDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPatientDeleteActionPerformed(evt);
            }
        });

        lblPatientID.setText("Item Id:");

        lblPatientUsername.setText("Name:");

        lblPatientName.setText("Cost:");

        lblPatientAge.setText("Expiry Date:");

        lblPatientEmail.setText("Quantity:");

        txtItemQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtItemQuantityActionPerformed(evt);
            }
        });

        lblPatientEmail1.setText("Avalability:");

        txtItemAvailability.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Yes", "No" }));

        lblPatientName1.setText("Description:");

        txtItemDesc.setColumns(20);
        txtItemDesc.setRows(5);
        jScrollPane1.setViewportView(txtItemDesc);

        javax.swing.GroupLayout panelItemLayout = new javax.swing.GroupLayout(panelItem);
        panelItem.setLayout(panelItemLayout);
        panelItemLayout.setHorizontalGroup(
            panelItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelItemLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelItemLayout.createSequentialGroup()
                        .addGroup(panelItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTitlePatient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(panelItemLayout.createSequentialGroup()
                                .addGroup(panelItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelItemLayout.createSequentialGroup()
                                        .addGap(26, 26, 26)
                                        .addComponent(btnPatientView))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(btnPatientDelete)
                                        .addComponent(btnPatientUpdate)))
                                .addGap(32, 32, 32)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 725, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(panelItemLayout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addGroup(panelItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPatientID)
                            .addComponent(lblPatientUsername)
                            .addComponent(lblPatientName)
                            .addComponent(lblPatientAge)
                            .addComponent(lblPatientEmail))
                        .addGap(31, 31, 31)
                        .addGroup(panelItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtItemExDate)
                            .addComponent(txtItemQuantity)
                            .addComponent(txtItemId, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtItemName)
                            .addComponent(txtItemCost))
                        .addGap(76, 76, 76)
                        .addGroup(panelItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelItemLayout.createSequentialGroup()
                                .addComponent(lblPatientEmail1)
                                .addGap(18, 18, 18)
                                .addComponent(txtItemAvailability, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelItemLayout.createSequentialGroup()
                                .addComponent(lblPatientName1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(597, 597, 597))))
            .addGroup(panelItemLayout.createSequentialGroup()
                .addGap(144, 144, 144)
                .addComponent(btnMedCreate)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        panelItemLayout.setVerticalGroup(
            panelItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelItemLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitlePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelItemLayout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(btnPatientView)
                        .addGap(18, 18, 18)
                        .addComponent(btnPatientUpdate)
                        .addGap(18, 18, 18)
                        .addComponent(btnPatientDelete))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(panelItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelItemLayout.createSequentialGroup()
                        .addGroup(panelItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblPatientID)
                                .addComponent(txtItemId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelItemLayout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addGroup(panelItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblPatientEmail1)
                                    .addComponent(txtItemAvailability, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(27, 27, 27)
                        .addGroup(panelItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelItemLayout.createSequentialGroup()
                                .addGroup(panelItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblPatientUsername)
                                    .addComponent(txtItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblPatientName1))
                                .addGap(28, 28, 28)
                                .addGroup(panelItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblPatientName)
                                    .addComponent(txtItemCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(40, 40, 40)
                                .addGroup(panelItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblPatientAge)
                                    .addComponent(txtItemExDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(36, 36, 36)
                                .addComponent(lblPatientEmail))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(txtItemQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addComponent(btnMedCreate)
                .addContainerGap(177, Short.MAX_VALUE))
        );

        panelWork.add(panelItem, "card4");

        panelStorekeeper.setBackground(new java.awt.Color(51, 102, 255));

        lblTitle3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblTitle3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle3.setText("Storekeeper");

        lblCaretakerSearch.setText("Search:");

        tableStorekeeper.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Username", "Age", "Email-Id"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableStorekeeper.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        ScrollPaneNgoManager1.setViewportView(tableStorekeeper);

        btnCaretakerView.setText("View");
        btnCaretakerView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCaretakerViewActionPerformed(evt);
            }
        });

        btnCaretakerDelete.setText("Delete");
        btnCaretakerDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCaretakerDeleteActionPerformed(evt);
            }
        });

        lblCaretakerId.setText("Storekeeper Id:");

        txtCaretakerId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCaretakerIdActionPerformed(evt);
            }
        });

        lblCaretakerEmailId.setText("Email-Id:");

        lblCaretakerName.setText("Name:");

        lblCaretakerPhno.setText("Phone No:");

        lblCaretakerUsername.setText("Username:");

        lblCaretakerPassword.setText("Password:");

        lblCaretakerAge.setText("Age:");

        btnCaretakerCreate.setText("Create");
        btnCaretakerCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCaretakerCreateActionPerformed(evt);
            }
        });

        btnCaretakerUpdate.setText("Update");
        btnCaretakerUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCaretakerUpdateActionPerformed(evt);
            }
        });

        lblCaretakerGender.setText("Gender:");

        cmbCaretakerGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female", "Others" }));

        lblCaretakerRole.setText("Role:");

        txtCaretakerRole.setEditable(false);
        txtCaretakerRole.setText("Storekeeper");

        javax.swing.GroupLayout panelStorekeeperLayout = new javax.swing.GroupLayout(panelStorekeeper);
        panelStorekeeper.setLayout(panelStorekeeperLayout);
        panelStorekeeperLayout.setHorizontalGroup(
            panelStorekeeperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTitle3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelStorekeeperLayout.createSequentialGroup()
                .addGroup(panelStorekeeperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelStorekeeperLayout.createSequentialGroup()
                        .addGap(517, 517, 517)
                        .addComponent(btnCaretakerView)
                        .addGap(40, 40, 40)
                        .addComponent(btnCaretakerDelete)
                        .addGap(18, 18, 18)
                        .addComponent(btnCaretakerUpdate))
                    .addGroup(panelStorekeeperLayout.createSequentialGroup()
                        .addGap(188, 188, 188)
                        .addGroup(panelStorekeeperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnCaretakerCreate)
                            .addComponent(ScrollPaneNgoManager1, javax.swing.GroupLayout.PREFERRED_SIZE, 695, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(panelStorekeeperLayout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(panelStorekeeperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelStorekeeperLayout.createSequentialGroup()
                        .addGroup(panelStorekeeperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelStorekeeperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(panelStorekeeperLayout.createSequentialGroup()
                                    .addComponent(lblCaretakerGender, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGap(34, 34, 34))
                                .addGroup(panelStorekeeperLayout.createSequentialGroup()
                                    .addComponent(lblCaretakerRole)
                                    .addGap(93, 93, 93)))
                            .addGroup(panelStorekeeperLayout.createSequentialGroup()
                                .addComponent(lblCaretakerId)
                                .addGap(34, 34, 34)))
                        .addGroup(panelStorekeeperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelStorekeeperLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                                .addGroup(panelStorekeeperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtCaretakerId, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(panelStorekeeperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(txtCaretakerName, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                                        .addComponent(txtCaretakerUsername)))
                                .addGap(988, 988, 988))
                            .addGroup(panelStorekeeperLayout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addGroup(panelStorekeeperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtCaretakerPhno)
                                    .addComponent(txtCaretakerPassword)
                                    .addComponent(txtCaretakerEmailId)
                                    .addComponent(cmbCaretakerGender, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtCaretakerAge, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtCaretakerRole, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(panelStorekeeperLayout.createSequentialGroup()
                        .addGroup(panelStorekeeperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCaretakerPhno)
                            .addComponent(lblCaretakerPassword)
                            .addComponent(lblCaretakerEmailId))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(panelStorekeeperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelStorekeeperLayout.createSequentialGroup()
                    .addGroup(panelStorekeeperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelStorekeeperLayout.createSequentialGroup()
                            .addGap(52, 52, 52)
                            .addGroup(panelStorekeeperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(lblCaretakerName)
                                .addComponent(lblCaretakerUsername, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblCaretakerAge, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(panelStorekeeperLayout.createSequentialGroup()
                            .addGap(436, 436, 436)
                            .addComponent(lblCaretakerSearch)
                            .addGap(18, 18, 18)
                            .addComponent(txtMedStoreSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap(622, Short.MAX_VALUE)))
        );
        panelStorekeeperLayout.setVerticalGroup(
            panelStorekeeperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelStorekeeperLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle3)
                .addGap(98, 98, 98)
                .addComponent(ScrollPaneNgoManager1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelStorekeeperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCaretakerDelete)
                    .addComponent(btnCaretakerView)
                    .addComponent(btnCaretakerUpdate))
                .addGap(39, 39, 39)
                .addGroup(panelStorekeeperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCaretakerId)
                    .addComponent(txtCaretakerId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(txtCaretakerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(txtCaretakerUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(txtCaretakerAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelStorekeeperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCaretakerGender)
                    .addComponent(cmbCaretakerGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelStorekeeperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCaretakerRole)
                    .addComponent(txtCaretakerRole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelStorekeeperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCaretakerEmailId)
                    .addComponent(txtCaretakerEmailId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelStorekeeperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCaretakerPassword)
                    .addComponent(txtCaretakerPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelStorekeeperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCaretakerPhno)
                    .addComponent(txtCaretakerPhno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addComponent(btnCaretakerCreate)
                .addGap(32, 32, 32))
            .addGroup(panelStorekeeperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelStorekeeperLayout.createSequentialGroup()
                    .addGap(98, 98, 98)
                    .addGroup(panelStorekeeperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblCaretakerSearch)
                        .addComponent(txtMedStoreSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(254, 254, 254)
                    .addComponent(lblCaretakerName)
                    .addGap(18, 18, 18)
                    .addComponent(lblCaretakerUsername)
                    .addGap(26, 26, 26)
                    .addComponent(lblCaretakerAge)
                    .addContainerGap(288, Short.MAX_VALUE)))
        );

        panelWork.add(panelStorekeeper, "card4");

        panelBilling.setBackground(new java.awt.Color(51, 102, 255));

        lblTitle4.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblTitle4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle4.setText("Medical Billing");

        tableEncounterOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Encounter No", "Medicine", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane5.setViewportView(tableEncounterOrder);

        tableItem1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Item Id", "Name", "Cost", "Expiry Date", "Quantity", "Availability"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane6.setViewportView(tableItem1);

        lblPatientUsername1.setText("Item Name:");

        txtItemName1.setEditable(false);

        lblPatientName2.setText("Cost:");

        txtItemCost1.setEditable(false);

        lblPatientAge1.setText("Expiry Date:");

        txtItemExDate1.setEditable(false);

        lblPatientEmail2.setText("Quantity:");

        txtItemQuantity1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtItemQuantity1ActionPerformed(evt);
            }
        });

        btnBillOrder.setText("Order");
        btnBillOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBillOrderActionPerformed(evt);
            }
        });

        btnSelectItem.setText("Select");
        btnSelectItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectItemActionPerformed(evt);
            }
        });

        lblOrderId.setText("Order Id:");

        txtItemOrderId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtItemOrderIdActionPerformed(evt);
            }
        });

        txtReceipt.setColumns(20);
        txtReceipt.setRows(5);
        jScrollPane7.setViewportView(txtReceipt);

        btnPrint.setText("Print");
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelBillingLayout = new javax.swing.GroupLayout(panelBilling);
        panelBilling.setLayout(panelBillingLayout);
        panelBillingLayout.setHorizontalGroup(
            panelBillingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTitle4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelBillingLayout.createSequentialGroup()
                .addGap(137, 137, 137)
                .addGroup(panelBillingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPatientUsername1)
                    .addComponent(lblPatientName2)
                    .addComponent(lblPatientAge1)
                    .addComponent(lblPatientEmail2)
                    .addComponent(lblOrderId))
                .addGap(47, 47, 47)
                .addGroup(panelBillingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txtItemExDate1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                    .addComponent(txtItemCost1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtItemName1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtItemOrderId, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtItemQuantity1))
                .addGap(65, 743, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBillingLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSelectItem)
                .addGap(626, 626, 626))
            .addGroup(panelBillingLayout.createSequentialGroup()
                .addGap(220, 220, 220)
                .addGroup(panelBillingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelBillingLayout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 659, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panelBillingLayout.createSequentialGroup()
                        .addGroup(panelBillingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 659, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(panelBillingLayout.createSequentialGroup()
                        .addComponent(btnBillOrder)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnPrint)
                        .addGap(377, 377, 377))))
        );
        panelBillingLayout.setVerticalGroup(
            panelBillingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBillingLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle4)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(panelBillingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelBillingLayout.createSequentialGroup()
                        .addGroup(panelBillingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelBillingLayout.createSequentialGroup()
                                .addGap(91, 91, 91)
                                .addGroup(panelBillingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtItemOrderId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblOrderId)))
                            .addGroup(panelBillingLayout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(btnSelectItem)))
                        .addGap(25, 25, 25)
                        .addGroup(panelBillingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPatientUsername1)
                            .addComponent(txtItemName1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(panelBillingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPatientName2)
                            .addComponent(txtItemCost1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(panelBillingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPatientAge1)
                            .addComponent(txtItemExDate1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(panelBillingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPatientEmail2)
                            .addComponent(txtItemQuantity1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelBillingLayout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(63, 63, 63)
                .addGroup(panelBillingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPrint)
                    .addComponent(btnBillOrder))
                .addContainerGap(53, Short.MAX_VALUE))
        );

        panelWork.add(panelBilling, "card7");

        panelDeliveryMan.setBackground(new java.awt.Color(51, 102, 255));

        lblTitle5.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblTitle5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle5.setText("Delivery Man");

        tableDeliveryMan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Username", "Age", "Email-Id"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableDeliveryMan.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        ScrollPaneNgoManager2.setViewportView(tableDeliveryMan);

        btnCaretakerView1.setText("View");
        btnCaretakerView1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCaretakerView1ActionPerformed(evt);
            }
        });

        btnCaretakerDelete1.setText("Delete");
        btnCaretakerDelete1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCaretakerDelete1ActionPerformed(evt);
            }
        });

        lblCaretakerId1.setText("Delivery Man Id:");

        txtCaretakerId1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCaretakerId1ActionPerformed(evt);
            }
        });

        lblCaretakerEmailId1.setText("Email-Id:");

        lblCaretakerName1.setText("Name:");

        lblCaretakerPhno1.setText("Phone No:");

        lblCaretakerUsername1.setText("Username:");

        lblCaretakerPassword1.setText("Password:");

        lblCaretakerAge1.setText("Age:");

        btnCaretakerCreate1.setText("Create");
        btnCaretakerCreate1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCaretakerCreate1ActionPerformed(evt);
            }
        });

        btnCaretakerUpdate1.setText("Update");
        btnCaretakerUpdate1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCaretakerUpdate1ActionPerformed(evt);
            }
        });

        lblCaretakerGender1.setText("Gender:");

        cmbCaretakerGender1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female", "Others" }));

        lblCaretakerRole1.setText("Role:");

        txtCaretakerRole1.setEditable(false);
        txtCaretakerRole1.setText("Delivery Man");

        javax.swing.GroupLayout panelDeliveryManLayout = new javax.swing.GroupLayout(panelDeliveryMan);
        panelDeliveryMan.setLayout(panelDeliveryManLayout);
        panelDeliveryManLayout.setHorizontalGroup(
            panelDeliveryManLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTitle5, javax.swing.GroupLayout.DEFAULT_SIZE, 1317, Short.MAX_VALUE)
            .addGroup(panelDeliveryManLayout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(panelDeliveryManLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCaretakerId1)
                    .addComponent(lblCaretakerGender1)
                    .addComponent(lblCaretakerRole1))
                .addGap(56, 56, 56)
                .addGroup(panelDeliveryManLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelDeliveryManLayout.createSequentialGroup()
                        .addGroup(panelDeliveryManLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtCaretakerName1)
                            .addComponent(txtCaretakerUsername1)
                            .addComponent(txtCaretakerId1))
                        .addGap(283, 283, 283)
                        .addGroup(panelDeliveryManLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelDeliveryManLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(lblCaretakerPhno1)
                                .addComponent(lblCaretakerPassword1))
                            .addComponent(lblCaretakerEmailId1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelDeliveryManLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtCaretakerPhno1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                            .addComponent(txtCaretakerEmailId1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCaretakerPassword1))
                        .addGap(369, 369, 369))
                    .addGroup(panelDeliveryManLayout.createSequentialGroup()
                        .addGroup(panelDeliveryManLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtCaretakerAge1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCaretakerRole1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbCaretakerGender1, javax.swing.GroupLayout.Alignment.LEADING, 0, 210, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(panelDeliveryManLayout.createSequentialGroup()
                .addGap(362, 362, 362)
                .addComponent(btnCaretakerCreate1)
                .addGap(35, 35, 35)
                .addComponent(btnCaretakerUpdate1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(panelDeliveryManLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelDeliveryManLayout.createSequentialGroup()
                    .addGap(28, 28, 28)
                    .addGroup(panelDeliveryManLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelDeliveryManLayout.createSequentialGroup()
                            .addGap(24, 24, 24)
                            .addGroup(panelDeliveryManLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblCaretakerName1)
                                .addComponent(lblCaretakerAge1)
                                .addComponent(lblCaretakerUsername1)))
                        .addGroup(panelDeliveryManLayout.createSequentialGroup()
                            .addComponent(btnCaretakerView1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnCaretakerDelete1))
                        .addComponent(ScrollPaneNgoManager2, javax.swing.GroupLayout.PREFERRED_SIZE, 695, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(594, Short.MAX_VALUE)))
        );
        panelDeliveryManLayout.setVerticalGroup(
            panelDeliveryManLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDeliveryManLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle5)
                .addGap(290, 290, 290)
                .addGroup(panelDeliveryManLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCaretakerId1)
                    .addGroup(panelDeliveryManLayout.createSequentialGroup()
                        .addComponent(txtCaretakerId1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtCaretakerName1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtCaretakerUsername1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelDeliveryManLayout.createSequentialGroup()
                        .addGroup(panelDeliveryManLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCaretakerEmailId1)
                            .addComponent(txtCaretakerEmailId1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(panelDeliveryManLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCaretakerPhno1)
                            .addComponent(txtCaretakerPhno1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(panelDeliveryManLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCaretakerPassword1)
                            .addComponent(txtCaretakerPassword1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(20, 20, 20)
                .addComponent(txtCaretakerAge1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelDeliveryManLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelDeliveryManLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)
                        .addComponent(lblCaretakerGender1)
                        .addGap(18, 18, 18)
                        .addComponent(lblCaretakerRole1)
                        .addGap(200, 200, 200))
                    .addGroup(panelDeliveryManLayout.createSequentialGroup()
                        .addComponent(cmbCaretakerGender1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtCaretakerRole1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addGroup(panelDeliveryManLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCaretakerCreate1)
                            .addComponent(btnCaretakerUpdate1))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(panelDeliveryManLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelDeliveryManLayout.createSequentialGroup()
                    .addGap(127, 127, 127)
                    .addComponent(ScrollPaneNgoManager2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addGroup(panelDeliveryManLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnCaretakerView1)
                        .addComponent(btnCaretakerDelete1))
                    .addGap(95, 95, 95)
                    .addComponent(lblCaretakerName1)
                    .addGap(18, 18, 18)
                    .addComponent(lblCaretakerUsername1)
                    .addGap(26, 26, 26)
                    .addComponent(lblCaretakerAge1)
                    .addContainerGap(280, Short.MAX_VALUE)))
        );

        panelWork.add(panelDeliveryMan, "card4");

        panelMedicalOrders.setBackground(new java.awt.Color(51, 102, 255));

        tableNgoOrder1.setAutoCreateRowSorter(true);
        tableNgoOrder1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Order Id", "Item", "Expiry Date", "Quantity", "Cost"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane9.setViewportView(tableNgoOrder1);

        lblTitle7.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblTitle7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle7.setText("Medical Orders");

        javax.swing.GroupLayout panelMedicalOrdersLayout = new javax.swing.GroupLayout(panelMedicalOrders);
        panelMedicalOrders.setLayout(panelMedicalOrdersLayout);
        panelMedicalOrdersLayout.setHorizontalGroup(
            panelMedicalOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTitle7, javax.swing.GroupLayout.DEFAULT_SIZE, 1317, Short.MAX_VALUE)
            .addGroup(panelMedicalOrdersLayout.createSequentialGroup()
                .addGap(282, 282, 282)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 720, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelMedicalOrdersLayout.setVerticalGroup(
            panelMedicalOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMedicalOrdersLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle7)
                .addGap(50, 50, 50)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(401, Short.MAX_VALUE))
        );

        panelWork.add(panelMedicalOrders, "card8");

        panelNgoOrders.setBackground(new java.awt.Color(51, 102, 255));

        lblTitle6.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblTitle6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle6.setText("NGO Orders");

        tableNgoOrder.setAutoCreateRowSorter(true);
        tableNgoOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Order Id", "Shopkeeper Id", "Delivery Man Id", "Item", "Quantity", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tableNgoOrder);

        jLabel1.setText("Shopkeeper Id:");

        jLabel2.setText("DeliveryMan Id:");

        jLabel3.setText("Order Id:");

        jLabel4.setText("Item:");

        jLabel5.setText("Status:");

        txtOrderId.setEditable(false);
        txtOrderId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOrderIdActionPerformed(evt);
            }
        });

        txtStatus.setEditable(false);

        btnOutForDelivery.setText("Out For Delivery");
        btnOutForDelivery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutForDeliveryActionPerformed(evt);
            }
        });

        btnViewOrder.setText("View");
        btnViewOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewOrderActionPerformed(evt);
            }
        });

        btnUpdateOrder.setText("Update");
        btnUpdateOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateOrderActionPerformed(evt);
            }
        });

        btnCancelOrder.setText("Cancel Order");
        btnCancelOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelOrderActionPerformed(evt);
            }
        });

        btnDelivered.setText("Delivered");
        btnDelivered.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeliveredActionPerformed(evt);
            }
        });

        txtItem.setEditable(false);

        jLabel7.setText("Quantity:");

        txtQty.setEditable(false);

        javax.swing.GroupLayout panelNgoOrdersLayout = new javax.swing.GroupLayout(panelNgoOrders);
        panelNgoOrders.setLayout(panelNgoOrdersLayout);
        panelNgoOrdersLayout.setHorizontalGroup(
            panelNgoOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTitle6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelNgoOrdersLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(panelNgoOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelNgoOrdersLayout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 720, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(260, 260, 260))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelNgoOrdersLayout.createSequentialGroup()
                        .addComponent(btnViewOrder)
                        .addGap(583, 583, 583))))
            .addGroup(panelNgoOrdersLayout.createSequentialGroup()
                .addGroup(panelNgoOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelNgoOrdersLayout.createSequentialGroup()
                        .addGap(142, 142, 142)
                        .addGroup(panelNgoOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7))
                        .addGap(38, 38, 38)
                        .addGroup(panelNgoOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)
                            .addComponent(txtOrderId, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)
                            .addComponent(txtItem)
                            .addComponent(txtQty)
                            .addComponent(txtShopkeerId, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtDeliveryManId, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(panelNgoOrdersLayout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(btnUpdateOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(btnCancelOrder)
                        .addGap(33, 33, 33)
                        .addComponent(btnOutForDelivery)
                        .addGap(27, 27, 27)
                        .addComponent(btnDelivered)))
                .addContainerGap(733, Short.MAX_VALUE))
        );
        panelNgoOrdersLayout.setVerticalGroup(
            panelNgoOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelNgoOrdersLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle6)
                .addGap(40, 40, 40)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(btnViewOrder)
                .addGap(108, 108, 108)
                .addGroup(panelNgoOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtShopkeerId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelNgoOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtDeliveryManId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelNgoOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtOrderId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelNgoOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelNgoOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(panelNgoOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(txtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addGroup(panelNgoOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOutForDelivery)
                    .addComponent(btnUpdateOrder)
                    .addComponent(btnCancelOrder)
                    .addComponent(btnDelivered))
                .addContainerGap(104, Short.MAX_VALUE))
        );

        panelWork.add(panelNgoOrders, "card9");

        SplitPaneMedAdmin.setRightComponent(panelWork);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(SplitPaneMedAdmin)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(SplitPaneMedAdmin, javax.swing.GroupLayout.DEFAULT_SIZE, 750, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogOutActionPerformed
        // TODO add your handling code here:
        dB4OUtil.storeSystem(system);
        CardLayout cardLayout = (CardLayout) cardPanel.getLayout();
        cardPanel.remove(this);
        cardLayout.previous(cardPanel);

    }//GEN-LAST:event_btnLogOutActionPerformed

    private void btnHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHomeActionPerformed
        // TODO add your handling code here:
        panelWork.removeAll();
        panelWork.add(panelHome);
        panelWork.repaint();
        panelWork.revalidate();
    }//GEN-LAST:event_btnHomeActionPerformed

    private void btnEncounterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncounterActionPerformed
        // TODO add your handling code here:
        panelWork.removeAll();
        panelWork.add(panelEncounter);
        panelWork.repaint();
        panelWork.revalidate();
    }//GEN-LAST:event_btnEncounterActionPerformed

    private void btnEncounterViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncounterViewActionPerformed
        // TODO add your handling code here:
        Integer selectedRowIndex = tableEncounter1.getSelectedRow();

        if (selectedRowIndex<0){

            JOptionPane.showMessageDialog(this, "Please select a row to view.");
            return;
        }
        else{

            DefaultTableModel model = (DefaultTableModel) tableEncounter1.getModel();
            Encounter enc = (Encounter) model.getValueAt(selectedRowIndex,0);

            txtEncounterNo.setText(enc.getEncounterNo());
            txtEncounterHospital.setText(enc.getHospital());
            txtEncounterDoctorUsername.setText(enc.getDoctorUserName());
            txtEncounterPatientUsername.setText(enc.getPatientUsername());
            txtEncounterDate.setText(enc.getDate());

            txtEncounterBP.setText(enc.getBP());
            txtEncounterTemperature.setText(enc.getTemperature());
            txtEncounterMedicine.setText(enc.getMedicine());
            txtMedicineQuantity.setText(enc.getMedicineQuantity());

        }

    }//GEN-LAST:event_btnEncounterViewActionPerformed

    private void txtMedicineQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMedicineQuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMedicineQuantityActionPerformed

    private void btnMedCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMedCreateActionPerformed
        // TODO add your handling code here:
        String id = txtItemId.getText();
        if(id.isEmpty()){
            JOptionPane.showMessageDialog(this, "Enter the Id");
            return;
        }
        else if(system.getMedicineList().uiqueItemId(id)== false){
            JOptionPane.showMessageDialog(this, "Id already exist");
            return;
        }
        
        
        
        String name = txtItemName.getText();
        if(name.isEmpty()){
            JOptionPane.showMessageDialog(this, "Enter the name");
            return;
        }
        
        
        if(data.numcheck(txtItemCost.getText())==false){
            JOptionPane.showMessageDialog(this, "Enter valid Cost");
            return;
        }
        Integer cost = Integer.valueOf(txtItemCost.getText());
        
        
        
        String date = txtItemExDate.getText();
        if(!data.dateCheck(date)){
            JOptionPane.showMessageDialog(this, "Please enter correct date in format mm/dd/yyyy");
            return;
        }
        
        
        if(data.numcheck(txtItemQuantity.getText())==false){
            JOptionPane.showMessageDialog(this, "Enter valid Item Quantity");
            return;
        }
        Integer qt = Integer.valueOf(txtItemQuantity.getText());
        
        
        
        String av = String.valueOf(txtItemAvailability.getSelectedItem());
        
        
        
        String desc = txtItemDesc.getText();
        if(desc.isEmpty()){
            JOptionPane.showMessageDialog(this, "Enter the description");
            return;
        }
        
        
        Medicine newPatient = system.getMedicineList().addMed();

        newPatient.setItemid(id);
        newPatient.setName(name);
        newPatient.setCost(cost);
        newPatient.setDate(date);
        newPatient.setQty(qt);
        newPatient.setAv(av);
        newPatient.setDesc(desc);
        //        newPatient.setPhno(phno);
       

        JOptionPane.showMessageDialog(this, "Item created successfully");

        txtItemId.setText("");
        txtItemCost.setText("");
        txtItemName.setText("");
        txtItemExDate.setText("");
        //      cbPatientGender
        txtItemQuantity.setText("");
        txtItemDesc.setText("");

        populateItemTable();
        populateCombo();
        populateBillItemTable();
        
    }//GEN-LAST:event_btnMedCreateActionPerformed

    private void btnPatientViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPatientViewActionPerformed
        // TODO add your handling code here:
        Integer selectedRowIndex = tableItem.getSelectedRow();

        if (selectedRowIndex<0){

            JOptionPane.showMessageDialog(this, "Please select a row to view.");
            return;
        }
        else{
            DefaultTableModel model = (DefaultTableModel) tableItem.getModel();
            Medicine pat = (Medicine) model.getValueAt(selectedRowIndex,0);

            txtItemId.setText(pat.getItemid());
            txtItemCost.setText(String.valueOf(pat.getCost()));
            txtItemName.setText(pat.getName());
            txtItemExDate.setText(pat.getDate());
            
            txtItemQuantity.setText(String.valueOf(pat.getQty()));
            txtItemAvailability.setSelectedItem(pat.getAv());
            txtItemDesc.setText(pat.getDesc());

        }
    }//GEN-LAST:event_btnPatientViewActionPerformed

    private void btnPatientUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPatientUpdateActionPerformed
        // TODO add your handling code here:

        Integer selectedRowIndex = tableItem.getSelectedRow();

        if (selectedRowIndex<0){

            JOptionPane.showMessageDialog(this, "Please select a row to view.");
            return;
        }
        else{
            DefaultTableModel model = (DefaultTableModel) tableItem.getModel();
            Medicine pat = (Medicine) model.getValueAt(selectedRowIndex,0);

//            pat.setItemid(txtItemId.getText());



            pat.setName(txtItemName.getText());
            if(txtItemName.getText().isEmpty()){
		JOptionPane.showMessageDialog(this, "Enter valid name");
                return;
            }
            
            
            
            if(!data.numcheck(txtItemCost.getText())){
		JOptionPane.showMessageDialog(this, "Enter valid Item Cost");
                return;
            }
            pat.setCost(Integer.valueOf(txtItemCost.getText()));
            
            
            
            pat.setDate(txtItemExDate.getText());
            if(!data.dateCheck(txtItemExDate.getText())){
		JOptionPane.showMessageDialog(this, "Enter valid Exp date");
                return;
            }
            
            if(!data.numcheck(txtItemQuantity.getText())){
		JOptionPane.showMessageDialog(this, "Enter valid Item Quantity");
                return;
            }
            
            pat.setQty(Integer.valueOf(txtItemQuantity.getText()));
            
            
            pat.setAv(String.valueOf(txtItemAvailability.getSelectedItem()));
            
            
            
            pat.setDesc(txtItemDesc.getText());
            if(txtItemDesc.getText().isEmpty()){
		JOptionPane.showMessageDialog(this, "Enter valid description");
                return;
            }
            

            JOptionPane.showMessageDialog(this, "Item updated successfully");

            populateItemTable();

        }

    }//GEN-LAST:event_btnPatientUpdateActionPerformed

    private void btnPatientDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPatientDeleteActionPerformed
        // TODO add your handling code here:
        Integer selectedRowIndex = tableItem.getSelectedRow();

        if (selectedRowIndex<0){

            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
            return;
        }

        else{
            DefaultTableModel model = (DefaultTableModel) tableItem.getModel();
            Medicine pat = (Medicine) model.getValueAt(selectedRowIndex,0);

            system.getMedicineList().deleteMedicine(pat);

            JOptionPane.showMessageDialog(this, "Item deleted successfully.");

            populateItemTable();
        }

    }//GEN-LAST:event_btnPatientDeleteActionPerformed

    private void txtItemQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtItemQuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtItemQuantityActionPerformed

    private void btnCaretakerViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCaretakerViewActionPerformed
        // TODO add your handling code here:
        Integer selectedRowIndex = tableStorekeeper.getSelectedRow();

        if (selectedRowIndex<0){

            JOptionPane.showMessageDialog(this, "Please select a row to view.");
            return;
        }

        else{
            DefaultTableModel model = (DefaultTableModel) tableStorekeeper.getModel();
            Pharmacist selMan = (Pharmacist) model.getValueAt(selectedRowIndex,0);

            txtCaretakerId.setText(selMan.getCaretakerId());
            txtCaretakerName.setText(selMan.getName());
            txtCaretakerUsername.setText(selMan.getUsername());
            txtCaretakerAge.setText(String.valueOf(selMan.getAge()));
            
            txtCaretakerRole.setText(selMan.getRole());
            cmbCaretakerGender.setSelectedItem(selMan.getGender());
            txtCaretakerEmailId.setText(selMan.getEmailId());
            txtCaretakerPhno.setText(String.valueOf(selMan.getPhno()));
            txtCaretakerPassword.setText(selMan.getPassword());

        }
    }//GEN-LAST:event_btnCaretakerViewActionPerformed

    private void btnCaretakerDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCaretakerDeleteActionPerformed
        // TODO add your handling code here:
        Integer selectedRowIndex = tableStorekeeper.getSelectedRow();

        if (selectedRowIndex<0){

            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
            return;
        }

        else{
            DefaultTableModel model = (DefaultTableModel) tableStorekeeper.getModel();
            Pharmacist selectedMan = (Pharmacist) model.getValueAt(selectedRowIndex,0);

            system.getPharmlist().deletePharmacist(selectedMan);

            JOptionPane.showMessageDialog(this, "Storekeeper deleted successfully.");

            //            dB4OUtil.storeSystem(system);
            populateStorekeeperTable();
        }
    }//GEN-LAST:event_btnCaretakerDeleteActionPerformed

    private void txtCaretakerIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCaretakerIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCaretakerIdActionPerformed

    private void btnCaretakerUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCaretakerUpdateActionPerformed
        // TODO add your handling code here:
        Integer selectedRowIndex = tableStorekeeper.getSelectedRow();

        if (selectedRowIndex<0){

            JOptionPane.showMessageDialog(this, "Please select a row to view.");
            return;
        }

        else{
            DefaultTableModel model = (DefaultTableModel) tableStorekeeper.getModel();
            Pharmacist selMan = (Pharmacist) model.getValueAt(selectedRowIndex,0);

            //            selMan.setCaretakerId(txtCaretakerId.getText());
            //
            selMan.setName(txtCaretakerName.getText());
            if(txtCaretakerName.getText().isEmpty()){
                JOptionPane.showMessageDialog(this, "Enter valid name");
                return;
            }
            //            selMan.setUsername(txtCaretakerUsername.getText());

            if(!data.numcheck(txtCaretakerAge.getText())){
                JOptionPane.showMessageDialog(this, "Enter valid age");
                return;
            }
            selMan.setAge(Integer.valueOf(txtCaretakerAge.getText()));

           
            selMan.setGender(String.valueOf(cmbCaretakerGender.getSelectedItem()));
            
            
            selMan.setRole(txtCaretakerRole.getText());
            
            
            selMan.setEmailId(txtCaretakerEmailId.getText());
            if(!data.emailCheck(txtCaretakerEmailId.getText())){
                JOptionPane.showMessageDialog(this, "Enter valid emailid");
                return;
            }

            if(!data.phnocheck(txtCaretakerPhno.getText())){
                JOptionPane.showMessageDialog(this, "Enter valid phone no");
                return;
            }
            selMan.setPhno(Long.valueOf(txtCaretakerPhno.getText()));
            
            
            selMan.setPassword(txtCaretakerPassword.getText());
            if(txtCaretakerPassword.getText().isEmpty()){
                JOptionPane.showMessageDialog(this, "Enter valid password");
                return;
            }

            JOptionPane.showMessageDialog(this, "Caretaker updated successfully");

            //            dB4OUtil.storeSystem(system);
            populateStorekeeperTable();
        }

    }//GEN-LAST:event_btnCaretakerUpdateActionPerformed

    private void btnCaretakerCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCaretakerCreateActionPerformed
        // TODO add your handling code here:

         String id = txtCaretakerId.getText();
    if(id.isEmpty()){
        JOptionPane.showMessageDialog(this, "Enter the Id");
        return;
    } else if(system.getPharmlist().uiquePharmacistId(id)==false){
        JOptionPane.showMessageDialog(this, "Id already exists");
        return;
    }

    String name = txtCaretakerName.getText();
    if(name.isEmpty()){
        JOptionPane.showMessageDialog(this, "Enter the name");
        return;
    }

    String username = txtCaretakerUsername.getText();
    if(username.isEmpty()){
        JOptionPane.showMessageDialog(this, "Enter the username");
        return;
    } else if(system.getPharmlist().uiquePharmacistUsername(username)==false){
        JOptionPane.showMessageDialog(this, "Username already exists");
        return;
    }

    if(data.numcheck(txtCaretakerAge.getText())==false){
        JOptionPane.showMessageDialog(this, "Enter valid age");
        return;
    }
    Integer age = Integer.valueOf(txtCaretakerAge.getText());

    String gender = String.valueOf(cmbCaretakerGender.getSelectedItem());

    String role = txtCaretakerRole.getText();

    String emailid = txtCaretakerEmailId.getText();
    if(!data.emailCheck(emailid)){
        JOptionPane.showMessageDialog(this, "Enter valid email id");
        return;
    } else if(!emailid.matches("^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$")) {
        JOptionPane.showMessageDialog(this, "Enter valid email id");
        return;
    }

    if(!data.phnocheck(txtCaretakerPhno.getText())){
        JOptionPane.showMessageDialog(this, "Enter valid phone no");
        return;
    } else if(!txtCaretakerPhno.getText().matches("^\\d{10}$")) {
        JOptionPane.showMessageDialog(this, "Enter valid 10-digit phone number");
        return;
    }
    Long phno = Long.valueOf(txtCaretakerPhno.getText());

    String pass = txtCaretakerPassword.getText();
    if(pass.isEmpty()){
        JOptionPane.showMessageDialog(this, "Enter valid password");
        return;
    }

    // Regex for password validation (minimum eight characters, at least one uppercase letter, one lowercase letter, one number, and one special character)
    if(!pass.matches("^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@#$%^&+=])(?=\\S+$).{8,}$")) {
        JOptionPane.showMessageDialog(this, "Enter valid password (Minimum eight characters, at least one uppercase letter, one lowercase letter, one number, and one special character)");
        return;
    }

    Pharmacist newManager = system.getPharmlist().addPharmacist();

    newManager.setCaretakerId(id);
    newManager.setName(name);
    newManager.setUsername(username);
    newManager.setAge(age);
    newManager.setGender(gender);
    newManager.setRole(role);
    newManager.setEmailId(emailid);
    newManager.setPhno(phno);
    newManager.setPassword(pass);

    JOptionPane.showMessageDialog(this, "Storekeeper created successfully");

    txtCaretakerId.setText("");
    txtCaretakerName.setText("");
    txtCaretakerUsername.setText("");
    txtCaretakerAge.setText("");
    txtCaretakerEmailId.setText("");
    txtCaretakerPhno.setText("");
    txtCaretakerPassword.setText("");

    //        dB4OUtil.storeSystem(system);
    populateStorekeeperTable();
    populateCombo();
    }//GEN-LAST:event_btnCaretakerCreateActionPerformed

    private void btnStorekeeperActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStorekeeperActionPerformed
        // TODO add your handling code here:
        panelWork.removeAll();
        panelWork.add(panelStorekeeper);
        panelWork.repaint();
        panelWork.revalidate();
    }//GEN-LAST:event_btnStorekeeperActionPerformed

    private void btnItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnItemsActionPerformed
        // TODO add your handling code here:
        panelWork.removeAll();
        panelWork.add(panelItem);
        panelWork.repaint();
        panelWork.revalidate();
        
    }//GEN-LAST:event_btnItemsActionPerformed

    private void txtItemQuantity1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtItemQuantity1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtItemQuantity1ActionPerformed

    private void btnSelectItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectItemActionPerformed
        // TODO add your handling code here:
        Integer selectedRowIndex = tableItem1.getSelectedRow();

        if (selectedRowIndex<0){

            JOptionPane.showMessageDialog(this, "Please select a row to view.");
            return;
        }
        else{
            DefaultTableModel model = (DefaultTableModel) tableItem1.getModel();
            Medicine pat = (Medicine) model.getValueAt(selectedRowIndex,0);
            
            if(pat.getQty()!=0){
                txtItemName1.setText(pat.getName());
                txtItemCost1.setText(String.valueOf(pat.getCost()));

                txtItemExDate1.setText(pat.getDate());

                txtItemQuantity1.setText(String.valueOf(pat.getQty()));
            }
            else{
                JOptionPane.showMessageDialog(this, "The Item is not available");
                return;
            }
        }
    }//GEN-LAST:event_btnSelectItemActionPerformed

    private void btnBillOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBillOrderActionPerformed
        // TODO add your handling code here:
        String orderId = txtItemOrderId.getText();
        if(orderId.isEmpty()){
            JOptionPane.showMessageDialog(this, "Enter the Order Id");
            return;
        }
        else if(system.getOrderList().uiqueNgoOrderId(orderId)== false){
            JOptionPane.showMessageDialog(this, "Order Id already exist");
            return;
        }
        
        
        
        String name = txtItemName1.getText();
        Integer cost = Integer.valueOf(txtItemCost1.getText());
        String date = txtItemExDate1.getText();
        
        
        if(data.numcheck(txtItemQuantity1.getText())==false){
            JOptionPane.showMessageDialog(this, "Enter valid Quantity");
            return;
        }
        Integer qty = Integer.valueOf(txtItemQuantity1.getText());
        
        Order o = system.getOrderList().addOrder();
        
        o.setOrderid(orderId);
        o.setItem(name);
        o.setCost(cost);
        o.setDate(date);
        o.setQty(qty);
        
        Medicine m = system.getMedicineList().findMedicine(name);
        Integer currQty = m.getQty();
        m.setQty(currQty - qty);
        populateItemTable();
        JOptionPane.showMessageDialog(this, "Order generated successfully");
        
           txtReceipt.append("\t\t Receipt \n\n"+
                "Order Id: \t\t\t" + txtItemOrderId.getText()+ "\n\n"+
               
                "\n==============================================================\n"+
                "Item: \t\t\t"+ txtItemName1.getText()+ "\n\n"+
                "Quantity: \t\t\t"+ txtItemQuantity1.getText()+ "\n\n"+
                "Cost: \t\t\t"+ txtItemCost1.getText()+ "\n\n"
                
        );
        
        txtItemOrderId.setText("");
        txtItemName1.setText("");
        txtItemCost1.setText("");
        txtItemExDate1.setText("");
        txtItemQuantity1.setText("");
        
        populateMedOrders();
        
        
    }//GEN-LAST:event_btnBillOrderActionPerformed

    private void txtItemOrderIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtItemOrderIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtItemOrderIdActionPerformed

    private void btnCaretakerView1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCaretakerView1ActionPerformed
        // TODO add your handling code here:
        Integer selectedRowIndex = tableDeliveryMan.getSelectedRow();

        if (selectedRowIndex<0){

            JOptionPane.showMessageDialog(this, "Please select a row to view.");
            return;
        }

        else{
            DefaultTableModel model = (DefaultTableModel) tableDeliveryMan.getModel();
            DeliveryMan selMan = (DeliveryMan) model.getValueAt(selectedRowIndex,0);

            txtCaretakerId1.setText(selMan.getDeliverymanId());
            txtCaretakerName1.setText(selMan.getName());
            txtCaretakerUsername1.setText(selMan.getUsername());
            txtCaretakerAge1.setText(String.valueOf(selMan.getAge()));
            
            txtCaretakerRole1.setText(selMan.getRole());
            cmbCaretakerGender1.setSelectedItem(selMan.getGender());
            txtCaretakerEmailId1.setText(selMan.getEmailId());
            txtCaretakerPhno1.setText(String.valueOf(selMan.getPhno()));
            txtCaretakerPassword1.setText(selMan.getPassword());

        }
    }//GEN-LAST:event_btnCaretakerView1ActionPerformed

    private void btnCaretakerDelete1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCaretakerDelete1ActionPerformed
        // TODO add your handling code here:
        Integer selectedRowIndex = tableDeliveryMan.getSelectedRow();

        if (selectedRowIndex<0){

            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
            return;
        }

        else{
            DefaultTableModel model = (DefaultTableModel) tableDeliveryMan.getModel();
            DeliveryMan selectedMan = (DeliveryMan) model.getValueAt(selectedRowIndex,0);

            system.getDeliveryManlist().deleteDeliveryMan(selectedMan);

            JOptionPane.showMessageDialog(this, "Delivery deleted successfully.");

            //            dB4OUtil.storeSystem(system);
            populateDeliveryManTable();
        }
    }//GEN-LAST:event_btnCaretakerDelete1ActionPerformed

    private void txtCaretakerId1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCaretakerId1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCaretakerId1ActionPerformed

    private void btnCaretakerCreate1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCaretakerCreate1ActionPerformed
        // TODO add your handling code here:
         String id = txtCaretakerId1.getText();
    if(id.isEmpty()){
        JOptionPane.showMessageDialog(this, "Enter the Id");
        return;
    } else if(system.getDeliveryManlist().uiqueDeliveryManId(id)==false){
        JOptionPane.showMessageDialog(this, "Id already exists");
        return;
    }
    
    String name = txtCaretakerName1.getText();
    if(name.isEmpty()){
        JOptionPane.showMessageDialog(this, "Enter the name");
        return;
    }
    
    String username = txtCaretakerUsername1.getText();
    if(username.isEmpty()){
        JOptionPane.showMessageDialog(this, "Enter the username");
        return;
    } else if(system.getPharmlist().uiquePharmacistId(username)==false){
        JOptionPane.showMessageDialog(this, "Username already exists");
        return;
    }
    
    if(data.numcheck(txtCaretakerAge1.getText())==false){
        JOptionPane.showMessageDialog(this, "Enter valid age");
        return;
    }
    Integer age = Integer.valueOf(txtCaretakerAge1.getText());

    String gender = String.valueOf(cmbCaretakerGender1.getSelectedItem());

    String role = txtCaretakerRole1.getText();

    String emailid = txtCaretakerEmailId1.getText();
    if(!data.emailCheck(emailid)){
        JOptionPane.showMessageDialog(this, "Enter valid email id");
        return;
    } else if(!emailid.matches("^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$")) {
        JOptionPane.showMessageDialog(this, "Enter valid email id");
        return;
    }

    if(!data.phnocheck(txtCaretakerPhno1.getText())){
        JOptionPane.showMessageDialog(this, "Enter valid phone no");
        return;
    } else if(!txtCaretakerPhno1.getText().matches("^\\d{10}$")) {
        JOptionPane.showMessageDialog(this, "Enter valid 10-digit phone number");
        return;
    }
    Long phno = Long.valueOf(txtCaretakerPhno1.getText());

    String pass = txtCaretakerPassword1.getText();
    if(pass.isEmpty()){
        JOptionPane.showMessageDialog(this, "Enter valid password");
        return;
    }

    // Regex for password validation (minimum eight characters, at least one uppercase letter, one lowercase letter, one number, and one special character)
    if(!pass.matches("^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@#$%^&+=])(?=\\S+$).{8,}$")) {
        JOptionPane.showMessageDialog(this, "Enter valid password (Minimum eight characters, at least one uppercase letter, one lowercase letter, one number, and one special character)");
        return;
    }

    DeliveryMan newManager = system.getDeliveryManlist().addDeliveryMan();

    newManager.setDeliverymanId(id);
    newManager.setName(name);
    newManager.setUsername(username);
    newManager.setAge(age);
    newManager.setGender(gender);
    newManager.setRole(role);
    newManager.setEmailId(emailid);
    newManager.setPhno(phno);
    newManager.setPassword(pass);

    JOptionPane.showMessageDialog(this, "DeliveryMan created successfully");

    txtCaretakerId1.setText("");
    txtCaretakerName1.setText("");
    txtCaretakerUsername1.setText("");
    txtCaretakerAge1.setText("");
    txtCaretakerEmailId1.setText("");
    txtCaretakerPhno1.setText("");
    txtCaretakerPassword1.setText("");

    //        dB4OUtil.storeSystem(system);
    populateDeliveryManTable();
    populateCombo();
        
    }//GEN-LAST:event_btnCaretakerCreate1ActionPerformed

    private void btnCaretakerUpdate1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCaretakerUpdate1ActionPerformed
        // TODO add your handling code here:
        Integer selectedRowIndex = tableDeliveryMan.getSelectedRow();

        if (selectedRowIndex<0){

            JOptionPane.showMessageDialog(this, "Please select a row to view.");
            return;
        }

        else{
            DefaultTableModel model = (DefaultTableModel) tableDeliveryMan.getModel();
            DeliveryMan selMan = (DeliveryMan) model.getValueAt(selectedRowIndex,0);

            //            selMan.setCaretakerId(txtCaretakerId.getText());
            //
            selMan.setName(txtCaretakerName1.getText());
            if(txtCaretakerName1.getText().isEmpty()){
                JOptionPane.showMessageDialog(this, "Enter valid name");
                return;
            }
            //            selMan.setUsername(txtCaretakerUsername.getText());

            if(!data.numcheck(txtCaretakerAge1.getText())){
                JOptionPane.showMessageDialog(this, "Enter valid age");
                return;
            }
            selMan.setAge(Integer.valueOf(txtCaretakerAge1.getText()));

           
            selMan.setGender(String.valueOf(cmbCaretakerGender1.getSelectedItem()));
            
            
            selMan.setRole(txtCaretakerRole1.getText());
            
            
            selMan.setEmailId(txtCaretakerEmailId1.getText());
            if(!data.emailCheck(txtCaretakerEmailId1.getText())){
                JOptionPane.showMessageDialog(this, "Enter valid emailid");
                return;
            }

            
            if(!data.phnocheck(txtCaretakerPhno1.getText())){
                JOptionPane.showMessageDialog(this, "Enter valid phone no");
                return;
            }
            selMan.setPhno(Long.valueOf(txtCaretakerPhno1.getText()));
            
            
            selMan.setPassword(txtCaretakerPassword1.getText());
            if(txtCaretakerPassword1.getText().isEmpty()){
                JOptionPane.showMessageDialog(this, "Enter valid password");
                return;
            }

            JOptionPane.showMessageDialog(this, "DeliveryMan updated successfully");

            //            dB4OUtil.storeSystem(system);
            populateDeliveryManTable();
        }
    }//GEN-LAST:event_btnCaretakerUpdate1ActionPerformed

    private void btnOutForDeliveryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutForDeliveryActionPerformed
        // TODO add your handling code here:
        Integer selectedRowIndex = tableNgoOrder.getSelectedRow();

        if (selectedRowIndex<0){

            JOptionPane.showMessageDialog(this, "Please select a row to view.");
            return;
        }

        else{
            
            DefaultTableModel model = (DefaultTableModel) tableNgoOrder.getModel();
            NgoOrder selMan = (NgoOrder) model.getValueAt(selectedRowIndex,0);
            
            Integer qty = selMan.getQty();
            String name = selMan.getItems();
            if(selMan.getStatus().equals("Pending")){
                selMan.setStatus("Out for Delivery");
                
                Medicine m = system.getMedicineList().findMedicine(name);
                Integer currQty = m.getQty();
                m.setQty(currQty - qty);
                populateItemTable();
                populateNgoOrderTable();
            }
            else{
                JOptionPane.showMessageDialog(this, "Cannot accept this process");
                return;
            }
        }
    }//GEN-LAST:event_btnOutForDeliveryActionPerformed

    private void btnUpdateOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateOrderActionPerformed
        // TODO add your handling code here:
        Integer selectedRowIndex = tableNgoOrder.getSelectedRow();

        if (selectedRowIndex<0){

            JOptionPane.showMessageDialog(this, "Please select a row to view.");
            return;
        }

        else{
            
            DefaultTableModel model = (DefaultTableModel) tableNgoOrder.getModel();
            NgoOrder selMan = (NgoOrder) model.getValueAt(selectedRowIndex,0);

            if(selMan.getStatus().equals("Cancelled") || selMan.getStatus().equals("Delivered")){
                JOptionPane.showMessageDialog(this, "Cannot be updated");
            }
            else{
                selMan.setShopkeeperId(String.valueOf(txtShopkeerId.getSelectedItem()));
                selMan.setDeliveryManId(String.valueOf(txtDeliveryManId.getSelectedItem()));

                populateNgoOrderTable();
            }
            
            txtOrderId.setText("");
            txtItem.setText("");
            txtQty.setText("");
            txtStatus.setText("");
        }
        
        
        
    }//GEN-LAST:event_btnUpdateOrderActionPerformed

    private void btnViewOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewOrderActionPerformed
        // TODO add your handling code here:
        Integer selectedRowIndex = tableNgoOrder.getSelectedRow();

        if (selectedRowIndex<0){

            JOptionPane.showMessageDialog(this, "Please select a row to view.");
            return;
        }

        else{
            
            DefaultTableModel model = (DefaultTableModel) tableNgoOrder.getModel();
            NgoOrder selMan = (NgoOrder) model.getValueAt(selectedRowIndex,0);
            
            if(selMan.getStatus().equals("Cancelled") || selMan.getStatus().equals("Delivered")){
                
                JOptionPane.showMessageDialog(this, "Cannot be Viewed");
                return;
            }
            else{
                txtOrderId.setText(selMan.getOrderid());
                txtItem.setText(selMan.getItems());
                txtQty.setText(String.valueOf(selMan.getQty()));
                txtStatus.setText(selMan.getStatus());
            }
        }
        
    }//GEN-LAST:event_btnViewOrderActionPerformed

    private void btnCancelOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelOrderActionPerformed
        // TODO add your handling code here:
        Integer selectedRowIndex = tableNgoOrder.getSelectedRow();

        if (selectedRowIndex<0){

            JOptionPane.showMessageDialog(this, "Please select a row to view.");
            return;
        }

        else {
            DefaultTableModel model = (DefaultTableModel) tableNgoOrder.getModel();
            NgoOrder selMan = (NgoOrder) model.getValueAt(selectedRowIndex,0);
            
            if(selMan.getStatus()!="Delivered"){
                selMan.setStatus("Cancelled");
                
                populateNgoOrderTable();
            }
        }
    }//GEN-LAST:event_btnCancelOrderActionPerformed

    private void btnDeliveredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeliveredActionPerformed
        // TODO add your handling code here:
        
        Integer selectedRowIndex = tableNgoOrder.getSelectedRow();

        if (selectedRowIndex<0){

            JOptionPane.showMessageDialog(this, "Please select a row to view.");
            return;
        }

        else{
            
            DefaultTableModel model = (DefaultTableModel) tableNgoOrder.getModel();
            NgoOrder selMan = (NgoOrder) model.getValueAt(selectedRowIndex,0);
            
            if(selMan.getStatus().equals("Out for Delivery")){
                selMan.setStatus("Delivered");
                
                populateNgoOrderTable();
            }
            else{
                JOptionPane.showMessageDialog(this, "Cannot accept this process");
                return;
            }
        }
    }//GEN-LAST:event_btnDeliveredActionPerformed

    private void btnBillingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBillingActionPerformed
        // TODO add your handling code here:
        panelWork.removeAll();
        panelWork.add(panelBilling);
        panelWork.repaint();
        panelWork.revalidate();
    }//GEN-LAST:event_btnBillingActionPerformed

    private void btnNgoOrdersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNgoOrdersActionPerformed
        // TODO add your handling code here:
        panelWork.removeAll();
        panelWork.add(panelNgoOrders);
        panelWork.repaint();
        panelWork.revalidate();
    }//GEN-LAST:event_btnNgoOrdersActionPerformed

    private void btnMedOrdersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMedOrdersActionPerformed
        // TODO add your handling code here:
        panelWork.removeAll();
        panelWork.add(panelMedicalOrders);
        panelWork.repaint();
        panelWork.revalidate();
    }//GEN-LAST:event_btnMedOrdersActionPerformed

    private void btnDeliveryManActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeliveryManActionPerformed
        // TODO add your handling code here:
        panelWork.removeAll();
        panelWork.add(panelDeliveryMan);
        panelWork.repaint();
        panelWork.revalidate();
    }//GEN-LAST:event_btnDeliveryManActionPerformed

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
     try {
            // TODO add your handling code here:
            txtReceipt.print();
        } catch (PrinterException ex) {
            /*Logger.getLogger(MedAdminWorkspace.class.getName()).log(Level.SEVERE, null, ex);*/
            JOptionPane.showMessageDialog(this, "Unable to print due to some issue");
            return;
        }
    
    }//GEN-LAST:event_btnPrintActionPerformed

    private void txtOrderIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOrderIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOrderIdActionPerformed

    private void populateHospitalEncounterTable(){
        DefaultTableModel model = (DefaultTableModel) tableEncounter1.getModel();
        model.setRowCount(0);
        
            for(Encounter e: system.getEncounterlist().getHospitalEncounterList()){
                  
                Object[] row = new Object[6];
                row[0] = e;
                row[1] = e.getDoctorUserName();
                row[2] = e.getPatientUsername(); 
                row[3] = e.getBP();
                row[4] = e.getTemperature();
                row[5] = e.getStatus();

                model.addRow(row);
            }
    }   
    
    private void populateHospitalEncounterOrderTable(){
        DefaultTableModel model = (DefaultTableModel) tableEncounterOrder.getModel();
        model.setRowCount(0);
        
            for(Encounter e: system.getEncounterlist().getHospitalEncounterList()){
                  
                Object[] row = new Object[3];
                row[0] = e;
                row[1] = e.getMedicine();
                row[2] = e.getMedicineQuantity();

                model.addRow(row);
            }
    }   
    


    private void populateItemTable(){
        DefaultTableModel model = (DefaultTableModel) tableItem.getModel();
        model.setRowCount(0);
        
            for(Medicine e: system.getMedicineList().getMedList()){
                  
                Object[] row = new Object[6];
                row[0] = e;
                row[1] = e.getName();
                row[2] = e.getCost(); 
                row[3] = e.getDate();
                row[4] = e.getQty();
                row[5] = e.getAv();

                model.addRow(row);
            }
    }   
    
    private void populateBillItemTable(){
        DefaultTableModel model = (DefaultTableModel) tableItem1.getModel();
        model.setRowCount(0);
        
            for(Medicine e: system.getMedicineList().getMedList()){
                  
                Object[] row = new Object[6];
                row[0] = e;
                row[1] = e.getName();
                row[2] = e.getCost(); 
                row[3] = e.getDate();
                row[4] = e.getQty();
                row[5] = e.getAv();

                model.addRow(row);
            }
    }   
    
    private void populateStorekeeperTable(){
        DefaultTableModel model = (DefaultTableModel) tableStorekeeper.getModel();
        model.setRowCount(0);
        
            for(Pharmacist e: system.getPharmlist().getPharList()){
                  
                Object[] row = new Object[5];
                row[0] = e;
                row[1] = e.getName();
                row[2] = e.getUsername(); 
                row[3] = e.getAge();
                row[4] = e.getEmailId();

                model.addRow(row);
            }
    }
    
    private void populateDeliveryManTable(){
        DefaultTableModel model = (DefaultTableModel) tableDeliveryMan.getModel();
        model.setRowCount(0);
        
            for(DeliveryMan e: system.getDeliveryManlist().getDeliveryManList()){
                  
                Object[] row = new Object[5];
                row[0] = e;
                row[1] = e.getName();
                row[2] = e.getUsername(); 
                row[3] = e.getAge();
                row[4] = e.getEmailId();

                model.addRow(row);
            }
    }
    
    private void populateNgoOrderTable(){
        
        DefaultTableModel model = (DefaultTableModel) tableNgoOrder.getModel();
        model.setRowCount(0);
        
            for(NgoOrder e: system.getNgoOrderList().getNgoOrderList()){
                  
                Object[] row = new Object[6];
                row[0] = e;
                row[1] = e.getShopkeeperId();
                row[2] = e.getDeliveryManId();
                row[3] = e.getItems();
                row[4] = e.getQty();
                row[5] = e.getStatus();

                model.addRow(row);
            }
    }
    
    private void populateMedOrders(){
        
        DefaultTableModel model = (DefaultTableModel) tableNgoOrder1.getModel();
        model.setRowCount(0);
        
            for(Order e: system.getOrderList().getOrderList()){
                  
                Object[] row = new Object[5];
                row[0] = e;
                row[1] = e.getItem();
                row[2] = e.getDate();
                row[3] = e.getQty();
                row[4] = e.getCost();

                model.addRow(row);
            }
    }
    
    public void populateCombo(){
        String[] docArr1 = system.getPharmlist().pharUsernameArray();
        DefaultComboBoxModel dn1 = new DefaultComboBoxModel(docArr1);
        txtShopkeerId.setModel(dn1);
        
        String[] docArr = system.getDeliveryManlist().delUsernameArray();
        DefaultComboBoxModel dn = new DefaultComboBoxModel(docArr);
        txtDeliveryManId.setModel(dn);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane ScrollPaneNgoManager1;
    private javax.swing.JScrollPane ScrollPaneNgoManager2;
    private javax.swing.JSplitPane SplitPaneMedAdmin;
    private javax.swing.JButton btnBillOrder;
    private javax.swing.JButton btnBilling;
    private javax.swing.JButton btnCancelOrder;
    private javax.swing.JButton btnCaretakerCreate;
    private javax.swing.JButton btnCaretakerCreate1;
    private javax.swing.JButton btnCaretakerDelete;
    private javax.swing.JButton btnCaretakerDelete1;
    private javax.swing.JButton btnCaretakerUpdate;
    private javax.swing.JButton btnCaretakerUpdate1;
    private javax.swing.JButton btnCaretakerView;
    private javax.swing.JButton btnCaretakerView1;
    private javax.swing.JButton btnDelivered;
    private javax.swing.JButton btnDeliveryMan;
    private javax.swing.JButton btnEncounter;
    private javax.swing.JButton btnEncounterView;
    private javax.swing.JButton btnHome;
    private javax.swing.JButton btnItems;
    private javax.swing.JButton btnLogOut;
    private javax.swing.JButton btnMedCreate;
    private javax.swing.JButton btnMedOrders;
    private javax.swing.JButton btnNgoOrders;
    private javax.swing.JButton btnOutForDelivery;
    private javax.swing.JButton btnPatientDelete;
    private javax.swing.JButton btnPatientUpdate;
    private javax.swing.JButton btnPatientView;
    private javax.swing.JButton btnPrint;
    private javax.swing.JButton btnSelectItem;
    private javax.swing.JButton btnStorekeeper;
    private javax.swing.JButton btnUpdateOrder;
    private javax.swing.JButton btnViewOrder;
    private javax.swing.JComboBox<String> cmbCaretakerGender;
    private javax.swing.JComboBox<String> cmbCaretakerGender1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JLabel lblCaretakerAge;
    private javax.swing.JLabel lblCaretakerAge1;
    private javax.swing.JLabel lblCaretakerEmailId;
    private javax.swing.JLabel lblCaretakerEmailId1;
    private javax.swing.JLabel lblCaretakerGender;
    private javax.swing.JLabel lblCaretakerGender1;
    private javax.swing.JLabel lblCaretakerId;
    private javax.swing.JLabel lblCaretakerId1;
    private javax.swing.JLabel lblCaretakerName;
    private javax.swing.JLabel lblCaretakerName1;
    private javax.swing.JLabel lblCaretakerPassword;
    private javax.swing.JLabel lblCaretakerPassword1;
    private javax.swing.JLabel lblCaretakerPhno;
    private javax.swing.JLabel lblCaretakerPhno1;
    private javax.swing.JLabel lblCaretakerRole;
    private javax.swing.JLabel lblCaretakerRole1;
    private javax.swing.JLabel lblCaretakerSearch;
    private javax.swing.JLabel lblCaretakerUsername;
    private javax.swing.JLabel lblCaretakerUsername1;
    private javax.swing.JLabel lblDoctorEncounterUsername;
    private javax.swing.JLabel lblEncounterBP;
    private javax.swing.JLabel lblEncounterDate;
    private javax.swing.JLabel lblEncounterHospital;
    private javax.swing.JLabel lblEncounterMedicine;
    private javax.swing.JLabel lblEncounterMedicineQuantity;
    private javax.swing.JLabel lblEncounterNo;
    private javax.swing.JLabel lblEncounterPatientUsername;
    private javax.swing.JLabel lblEncounterTemperature;
    private javax.swing.JLabel lblOrderId;
    private javax.swing.JLabel lblPatientAge;
    private javax.swing.JLabel lblPatientAge1;
    private javax.swing.JLabel lblPatientEmail;
    private javax.swing.JLabel lblPatientEmail1;
    private javax.swing.JLabel lblPatientEmail2;
    private javax.swing.JLabel lblPatientID;
    private javax.swing.JLabel lblPatientName;
    private javax.swing.JLabel lblPatientName1;
    private javax.swing.JLabel lblPatientName2;
    private javax.swing.JLabel lblPatientUsername;
    private javax.swing.JLabel lblPatientUsername1;
    private javax.swing.JLabel lblRole;
    private javax.swing.JLabel lblTitle2;
    private javax.swing.JLabel lblTitle3;
    private javax.swing.JLabel lblTitle4;
    private javax.swing.JLabel lblTitle5;
    private javax.swing.JLabel lblTitle6;
    private javax.swing.JLabel lblTitle7;
    private javax.swing.JLabel lblTitleEncounter;
    private javax.swing.JLabel lblTitlePatient;
    private javax.swing.JPanel panelBilling;
    private javax.swing.JPanel panelControl;
    private javax.swing.JPanel panelDeliveryMan;
    private javax.swing.JPanel panelEncounter;
    private javax.swing.JPanel panelHome;
    private javax.swing.JPanel panelItem;
    private javax.swing.JPanel panelMedicalOrders;
    private javax.swing.JPanel panelNgoOrders;
    private javax.swing.JPanel panelStorekeeper;
    private javax.swing.JPanel panelWork;
    private javax.swing.JTable tableDeliveryMan;
    private javax.swing.JTable tableEncounter1;
    private javax.swing.JTable tableEncounterOrder;
    private javax.swing.JTable tableItem;
    private javax.swing.JTable tableItem1;
    private javax.swing.JTable tableNgoOrder;
    private javax.swing.JTable tableNgoOrder1;
    private javax.swing.JTable tableStorekeeper;
    private javax.swing.JTextField txtCaretakerAge;
    private javax.swing.JTextField txtCaretakerAge1;
    private javax.swing.JTextField txtCaretakerEmailId;
    private javax.swing.JTextField txtCaretakerEmailId1;
    private javax.swing.JTextField txtCaretakerId;
    private javax.swing.JTextField txtCaretakerId1;
    private javax.swing.JTextField txtCaretakerName;
    private javax.swing.JTextField txtCaretakerName1;
    private javax.swing.JPasswordField txtCaretakerPassword;
    private javax.swing.JPasswordField txtCaretakerPassword1;
    private javax.swing.JTextField txtCaretakerPhno;
    private javax.swing.JTextField txtCaretakerPhno1;
    private javax.swing.JTextField txtCaretakerRole;
    private javax.swing.JTextField txtCaretakerRole1;
    private javax.swing.JTextField txtCaretakerUsername;
    private javax.swing.JTextField txtCaretakerUsername1;
    private javax.swing.JComboBox<String> txtDeliveryManId;
    private javax.swing.JTextField txtEncounterBP;
    private javax.swing.JTextField txtEncounterDate;
    private javax.swing.JTextField txtEncounterDoctorUsername;
    private javax.swing.JTextField txtEncounterHospital;
    private javax.swing.JTextField txtEncounterMedicine;
    private javax.swing.JTextField txtEncounterNo;
    private javax.swing.JTextField txtEncounterPatientUsername;
    private javax.swing.JTextField txtEncounterTemperature;
    private javax.swing.JTextField txtItem;
    private javax.swing.JComboBox<String> txtItemAvailability;
    private javax.swing.JTextField txtItemCost;
    private javax.swing.JTextField txtItemCost1;
    private javax.swing.JTextArea txtItemDesc;
    private javax.swing.JTextField txtItemExDate;
    private javax.swing.JTextField txtItemExDate1;
    private javax.swing.JTextField txtItemId;
    private javax.swing.JTextField txtItemName;
    private javax.swing.JTextField txtItemName1;
    private javax.swing.JTextField txtItemOrderId;
    private javax.swing.JTextField txtItemQuantity;
    private javax.swing.JTextField txtItemQuantity1;
    private javax.swing.JTextField txtMedStoreSearch;
    private javax.swing.JTextField txtMedicineQuantity;
    private javax.swing.JTextField txtOrderId;
    private javax.swing.JTextField txtQty;
    private javax.swing.JTextArea txtReceipt;
    private javax.swing.JComboBox<String> txtShopkeerId;
    private javax.swing.JTextField txtStatus;
    // End of variables declaration//GEN-END:variables
}
